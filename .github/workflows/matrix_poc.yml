name: Projects Matrix PoC

on:
  workflow_dispatch:
    inputs:
      matrix_list:
        description: "Lista de combinaciones proyecto+env en JSON"
        required: true
        default: '[{"project": "1000-5", "env": "dev"}, ...]'
      exclude_list:
        description: "Array de project:env a excluir"
        required: false
        default: '["1000-5:mlops","1000-6:dev"]'

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          python3 <<EOF
          import json, os
          matrix = json.loads(os.environ['MATRIX_LIST'])
          exclude = set(json.loads(os.environ['EXCLUDE_LIST']))
          filtered = [x for x in matrix if f"{x['project']}:{x['env']}" not in exclude]
          print(f"::set-output name=matrix::{json.dumps({'include': filtered})}")
          EOF
        env:
          MATRIX_LIST: ${{ github.event.inputs.matrix_list }}
          EXCLUDE_LIST: ${{ github.event.inputs.exclude_list }}

  plan:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
    steps:
      - run: echo "Plan ${{ matrix.project }}:${{ matrix.env }}"

  apply:
    needs: plan
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
    environment: approve-${{ matrix.project }}-${{ matrix.env }}
    steps:
      - run: echo "Apply ${{ matrix.project }}:${{ matrix.env }}"
