name: Projects Matrix PoC

on:
  workflow_dispatch:
    inputs:
      matrix_list:
        description: "List of project+env combinations as JSON"
        required: true
        default: >
          [
            {"project": "1000-5", "env": "dev"},
            {"project": "1000-5", "env": "mlops"},
            {"project": "1000-5", "env": "prd"},
            {"project": "1000-6", "env": "dev"},
            {"project": "1000-6", "env": "prd"}
          ]
      exclude_list:
        description: "Array of project:env combos to exclude"
        required: false
        default: '["1000-5:mlops","1000-6:dev"]'

jobs:
  plan:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        include: ${{ fromJSON(github.event.inputs.matrix_list) }}

    steps:
      - name: Check if excluded
        id: check_exclude
        run: |
          EXCLUDES=$(echo '${{ github.event.inputs.exclude_list }}' | jq -r '.[]')
          KEY="${{ matrix.project }}:${{ matrix.env }}"
          SKIP=false
          for ex in $EXCLUDES; do
            if [ "$KEY" = "$ex" ]; then
              echo "This combo is excluded: $KEY"
              SKIP=true
              break
            fi
          done
          echo "skip=$SKIP" >> $GITHUB_OUTPUT

      - name: Step 1
        if: ${{ steps.check_exclude.outputs.skip != 'true' }}
        run: echo "Running Step 1 for ${{ matrix.project }}:${{ matrix.env }}"

      - name: Step 2
        if: ${{ steps.check_exclude.outputs.skip != 'true' }}
        run: echo "Running Step 2 for ${{ matrix.project }}:${{ matrix.env }}"

      - name: Step 3
        if: ${{ steps.check_exclude.outputs.skip != 'true' }}
        run: echo "Running Step 3 for ${{ matrix.project }}:${{ matrix.env }}"

  apply:
    needs: plan  
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        include: ${{ fromJSON(github.event.inputs.matrix_list) }}

    steps:
      - name: Check if excluded
        id: check_exclude
        run: |
          EXCLUDES=$(echo '${{ github.event.inputs.exclude_list }}' | jq -r '.[]')
          KEY="${{ matrix.project }}:${{ matrix.env }}"
          SKIP=false
          for ex in $EXCLUDES; do
            if [ "$KEY" = "$ex" ]; then
              echo "This combo is excluded: $KEY"
              SKIP=true
              break
            fi
          done
          echo "skip=$SKIP" >> $GITHUB_OUTPUT

      - name: Step 4
        if: ${{ steps.check_exclude.outputs.skip != 'true' }}
        run: echo "Running Step 1 for ${{ matrix.project }}:${{ matrix.env }}"

      - name: Step 5
        if: ${{ steps.check_exclude.outputs.skip != 'true' }}
        run: echo "Running Step 2 for ${{ matrix.project }}:${{ matrix.env }}"

      - name: Step 6
        if: ${{ steps.check_exclude.outputs.skip != 'true' }}
        run: echo "Running Step 3 for ${{ matrix.project }}:${{ matrix.env }}"
        
