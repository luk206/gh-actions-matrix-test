name: Projects Matrix PoC

on:
  workflow_dispatch:
    inputs:
      projects:
        description: "Projects to deploy (comma-separated, e.g., 1000-5,1000-6,1000-7)"
        required: true
        default: "1000-5,1000-6,1000-7,1000-8,1000-9"
      
      environments:
        description: "Environments to deploy (comma-separated, e.g., dev,mlops,prd)"
        required: true
        default: "dev,mlops,prd"
      
      exclude:
        description: "Exclude combinations (comma-separated, e.g., 1000-5:mlops,1000-6:dev)"
        required: false
        default: "1000-5:mlops,1000-6:dev"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Build matrix
        id: set-matrix
        run: |
          # Convertir inputs en arrays
          IFS=',' read -ra PROJECTS <<< "${{ github.event.inputs.projects }}"
          IFS=',' read -ra ENVS <<< "${{ github.event.inputs.environments }}"
          IFS=',' read -ra EXCLUDES <<< "${{ github.event.inputs.exclude }}"
          
          # Construir JSON array
          echo '{"include":[' > matrix.json
          first=true
          
          for project in "${PROJECTS[@]}"; do
            project=$(echo "$project" | xargs)  # trim whitespace
            for env in "${ENVS[@]}"; do
              env=$(echo "$env" | xargs)  # trim whitespace
              combo="${project}:${env}"
              
              # Verificar si está en exclusiones
              excluded=false
              for excl in "${EXCLUDES[@]}"; do
                excl=$(echo "$excl" | xargs)
                if [[ "$combo" == "$excl" ]]; then
                  excluded=true
                  break
                fi
              done
              
              if [[ "$excluded" == "false" ]]; then
                if [[ "$first" == "false" ]]; then
                  echo ',' >> matrix.json
                fi
                echo -n "{\"project\":\"${project}\",\"env\":\"${env}\"}" >> matrix.json
                first=false
              fi
            done
          done
          
          echo ']}' >> matrix.json
          
          # Output
          cat matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  plan:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Plan ${{ matrix.project }}:${{ matrix.env }}
        id: plan
        run: |
          echo "Running plan for ${{ matrix.project }}:${{ matrix.env }}"
          
          # Simular fallo para 1000-5:prd
          if [[ "${{ matrix.project }}" == "1000-5" && "${{ matrix.env }}" == "prd" ]]; then
            echo "::error::Plan failed for 1000-5:prd"
            exit 1
          fi
          
          echo "Plan completed successfully"
      
      - name: Save plan status
        if: always()
        run: |
          mkdir -p plan-status
          if [[ "${{ steps.plan.outcome }}" == "success" ]]; then
            echo "success" > plan-status/${{ matrix.project }}-${{ matrix.env }}.txt
          else
            echo "failure" > plan-status/${{ matrix.project }}-${{ matrix.env }}.txt
          fi
      
      - name: Upload plan status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-status-${{ matrix.project }}-${{ matrix.env }}
          path: plan-status/${{ matrix.project }}-${{ matrix.env }}.txt
          retention-days: 1

  apply:
    needs: [prepare, plan]
    if: always()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    environment: approve-${{ matrix.project }}-${{ matrix.env }}
    steps:
      - name: Download plan status
        uses: actions/download-artifact@v4
        with:
          name: plan-status-${{ matrix.project }}-${{ matrix.env }}
          path: plan-status
      
      - name: Check plan status and apply
        run: |
          PLAN_STATUS=$(cat plan-status/${{ matrix.project }}-${{ matrix.env }}.txt)
          
          echo "Plan status for ${{ matrix.project }}:${{ matrix.env }} = $PLAN_STATUS"
          
          if [[ "$PLAN_STATUS" != "success" ]]; then
            echo "::warning::Plan failed for ${{ matrix.project }}:${{ matrix.env }}, skipping apply"
            exit 1
          fi
          
          echo "Applying ${{ matrix.project }}:${{ matrix.env }}"
          # Aquí va tu lógica de apply
