name: Projects Matrix PoC

on:
  workflow_dispatch:
    inputs:
      matrix_list:
        description: "List of project+env combinations as JSON"
        required: true
        default: >
          [
            {"project": "1000-5", "env": "dev"},
            {"project": "1000-5", "env": "mlops"},
            {"project": "1000-5", "env": "prd"},
            {"project": "1000-6", "env": "dev"},
            {"project": "1000-6", "env": "prd"},
            {"project": "1000-7", "env": "dev"},
            {"project": "1000-7", "env": "mlops"},
            {"project": "1000-7", "env": "prd"},
            {"project": "1000-8", "env": "dev"},
            {"project": "1000-8", "env": "mlops"},
            {"project": "1000-8", "env": "prd"},
            {"project": "1000-9", "env": "dev"},
            {"project": "1000-9", "env": "mlops"},
            {"project": "1000-9", "env": "prd"},
          ]

      exclude_list:
        description: "Array of project:env combos to exclude"
        required: false
        default: '["1000-5:mlops","1000-6:dev"]'

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter-matrix.outputs.matrix }}
    steps:
      - name: Filter matrix based on exclusions
        id: filter-matrix
        run: |
          cat > filter.py << 'PYTHON_SCRIPT'
          import json
          import os
          import sys
          
          # Parse inputs
          matrix_input = json.loads(os.environ['MATRIX_LIST'])
          exclude_input = json.loads(os.environ['EXCLUDE_LIST'])
          
          # Create set of exclusions for fast lookup
          exclude_set = set(exclude_input)
          
          # Filter matrix
          filtered = []
          for item in matrix_input:
              combo = f"{item['project']}:{item['env']}"
              if combo not in exclude_set:
                  filtered.append(item)
          
          # Output in GitHub Actions matrix format
          result = {"include": filtered}
          print(f"Filtered matrix: {json.dumps(result, indent=2)}", file=sys.stderr)
          
          # Set output using new GitHub Actions format
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"matrix={json.dumps(result)}\n")
          PYTHON_SCRIPT
          
          python3 filter.py
        env:
          MATRIX_LIST: ${{ github.event.inputs.matrix_list }}
          EXCLUDE_LIST: ${{ github.event.inputs.exclude_list }}

  plan:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    outputs:
      # Crear un output para cada combinación que indique si tuvo éxito
      result: ${{ steps.set-result.outputs.result }}
    steps:
      - name: Plan ${{ matrix.project }}:${{ matrix.env }}
        id: plan-step
        continue-on-error: true
        run: |
          echo "Plan ${{ matrix.project }}:${{ matrix.env }}"
          # Simulando el fallo específico de 1000-5:prd
          if [[ "${{ matrix.project }}" == "1000-5" && "${{ matrix.env }}" == "prd" ]]; then
            echo "Error: Plan failed for 1000-5:prd"
            exit 1
          fi

      - name: Set result output
        id: set-result
        run: |
          echo "result=${{ steps.plan-step.outcome }}" >> $GITHUB_OUTPUT

      - name: Mark job as failed if plan failed
        if: steps.plan-step.outcome == 'failure'
        run: |
          echo "::error::Plan failed for ${{ matrix.project }}:${{ matrix.env }}"
          exit 1

  apply:
    needs: [build-matrix, plan]
    if: always()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    environment: approve-${{ matrix.project }}-${{ matrix.env }}
    steps:
      - name: Check if plan succeeded
        id: check-plan
        run: |
          # Verificar si el job de plan correspondiente tuvo éxito
          PLAN_RESULT="${{ needs.plan.result }}"
          
          if [[ "$PLAN_RESULT" != "success" ]]; then
            echo "::warning::Plan job did not succeed (status: $PLAN_RESULT). Skipping apply for ${{ matrix.project }}:${{ matrix.env }}"
            echo "should_apply=false" >> $GITHUB_OUTPUT
          else
            echo "Plan succeeded. Proceeding with apply for ${{ matrix.project }}:${{ matrix.env }}"
            echo "should_apply=true" >> $GITHUB_OUTPUT
          fi

      - name: Apply ${{ matrix.project }}:${{ matrix.env }}
        if: steps.check-plan.outputs.should_apply == 'true'
        run: echo "Apply ${{ matrix.project }}:${{ matrix.env }}"
